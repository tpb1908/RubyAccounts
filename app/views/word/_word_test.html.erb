<div class="panel-body">
    <div class="panel panel-default" id="word_container"> 
        
    </div>
    <div class="input group input-group-lg">
        <input type="text" class="form-control" autocomplete="off" autocapitalize="off" id="input" placeholder="Type here"></input>
    </div>
</div>
<div class="panel-footer">
    Analysis goes here
</div>

<script>
    var words = [
    "the", "name", "of", "very", "to", "through", "and", "just", "a",
    "form", "in", "much", "is", "great", "it", "think", "you", "say",
    "that", "help", "he", "low", "was", "line", "for", "before", "on",
    "turn", "are", "cause", "with", "same", "as", "mean", "I", "differ",
    "his", "move", "they", "right", "be", "boy", "at", "old", "one",
    "too", "have", "does", "this", "tell", "from", "sentence", "or",
    "set", "had", "three", "by", "want", "hot", "air", "but", "well",
    "some", "also", "what", "play", "there", "small", "we", "end", "can",
    "put", "out", "home", "other", "read", "were", "hand", "all", "port",
    "your", "large", "when", "spell", "up", "add", "use", "even", "word",
    "land", "how", "here", "said", "must", "an", "big", "each", "high",
    "she", "such", "which", "follow", "do", "act", "their", "why", "time",
    "ask", "if", "men", "will", "change", "way", "went", "about", "light",
    "many", "kind", "then", "off", "them", "need", "would", "house",
    "write", "picture", "like", "try", "so", "us", "these", "again",
    "her", "animal", "long", "point", "make", "mother", "thing", "world",
    "see", "near", "him", "build", "two", "self", "has", "earth", "look",
    "father", "more", "head", "day", "stand", "could", "own", "go",
    "page", "come", "should", "did", "country", "my", "found", "sound",
    "answer", "no", "school", "most", "grow", "number", "study", "who",
    "still", "over", "learn", "know", "plant", "water", "cover", "than",
    "food", "call", "sun", "first", "four", "people", "thought", "may",
    "let", "down", "keep", "side", "eye", "been", "never", "now", "last",
    "find", "door", "any", "between", "new", "city", "work", "tree",
    "part", "cross", "take", "since", "get", "hard", "place", "start",
    "made", "might", "live", "story", "where", "saw", "after", "far",
    "back", "sea", "little", "draw", "only", "left", "round", "late",
    "man", "run", "year", "don't", "came", "while", "show", "press",
    "every", "close", "good", "night", "me", "real", "give", "life",
    "our", "few", "under", "stop", "open", "ten", "seem", "simple",
    "together", "several", "next", "vowel", "white", "toward", "children",
    "war", "begin", "lay", "got", "against", "walk", "pattern", "example",
    "slow", "ease", "center", "paper", "love", "often", "person",
    "always", "money", "music", "serve", "those", "appear", "both",
    "road", "mark", "map", "book", "science", "letter", "rule", "until",
    "govern", "mile", "pull", "river", "cold", "car", "notice", "feet",
    "voice", "care", "fall", "second", "power", "group", "town", "carry",
    "fine", "took", "certain", "rain", "fly", "eat", "unit", "room",
    "lead", "friend", "cry", "began", "dark", "idea", "machine", "fish",
    "note", "mountain", "wait", "north", "plan", "once", "figure", "base",
    "star", "hear", "box", "horse", "noun", "cut", "field", "sure",
    "rest", "watch", "correct", "color", "able", "face", "pound", "wood",
    "done", "main", "beauty", "enough", "drive", "plain", "stood", "girl",
    "contain", "usual", "front", "young", "teach", "ready", "week",
    "above", "final", "ever", "gave", "red", "green", "list", "oh",
    "though", "quick", "feel", "develop", "talk", "sleep", "bird", "warm",
    "soon", "free", "body", "minute", "dog", "strong", "family",
    "special", "direct", "mind", "pose", "behind", "leave", "clear",
    "song", "tail", "measure", "produce", "state", "fact", "product",
    "street", "black", "inch", "short", "lot", "numeral", "nothing",
    "class", "course", "wind", "stay", "question", "wheel", "happen",
    "full", "complete", "force", "ship", "blue", "area", "object", "half",
    "decide", "rock", "surface", "order", "deep", "fire", "moon", "south",
    "island", "problem", "foot", "piece", "yet", "told", "busy", "knew",
    "test", "pass", "record", "farm", "boat", "top", "common", "whole",
    "gold", "king", "possible", "size", "plane", "heard", "age", "best",
    "dry", "hour", "wonder", "better", "laugh", "true", "thousand",
    "during", "ago", "hundred", "ran", "am", "check", "remember", "game",
    "step", "shape", "early", "yes", "hold", "hot", "west", "miss",
    "ground", "brought", "interest", "heat", "reach", "snow", "fast",
    "bed", "five", "bring", "sing", "sit", "listen", "perhaps", "six",
    "fill", "table", "east", "travel", "weight", "less", "language",
    "morning", "among"];

    var wordSet = [];
    var wordIndex = 0;
    var input = document.getElementById("input");
    var lastKey = -1;
    var lastLength = 0;
    var nextMovePosition = 0;
    var positionForDeletion = 0;
    var endLineQueue = [];

    function shuffle(array) {
        var currentIndex = array.length, temporaryValue, randomIndex;

        // While there remain elements to shuffle...
        while (0 !== currentIndex) {

            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }

        return array;
    }

    function addWords() {
        wordSet = shuffle(words);
        var spans = "";
        var wordContainer = $("#word_container")
        for(var i = 0; i < wordSet.length; i++) {
            spans += "<span num="+i+">" + words[i] + "</span>";
        }
        document.getElementById("word_container").innerHTML = spans;
        var boxWidth = wordContainer.innerWidth;
        var widthSum = 0;
        for(var i = 0; i < wordSet.length; i++) {
            var span = wordContainer.find("[num="+i+"]");
            widthSum += span.width() + span.outerWidth();
            if(widthSum > boxWidth) {
                endLineQueue.push(i+1);
                widthSum = 0;
            }
        }
        positionForDeletion = endLineQueue.shift();
        console.log("End line values " + endLineQueue);
        nextMovePosition = endLineQueue.shift();
    }

    function computePositionForNextMovement() {
        if(wordIndex >= nextMovePosition) {
            nextMovePosition = endLineQueue.shift();
        }
    }

    function removeCurrentLine() {
        while($("#word_container").find("[num="+positionForDeletion+"]").length > 0) {
            $("#word_container").find("[num="+positionForDeletion+"]").remove();
        }
        positionForDeletion = wordIndex;
    }

    function move() {
        if(wordIndex - 1 === nextMovePosition) {
            if(nextMovePosition !== 0) {
                removeCurrentLine();
            }
            computePositionForNextMovement();
        }
    }



    function setColor(complete) {
        var text = input.value;
        text = trim(text);
        input.value = text;
        $("#word_container").find("[num="+wordIndex+"]").css('color',"#000000");
        if(complete) {
            console.log("Checking complete word");
            console.log("Word: " + wordSet[wordIndex] + " Typed: " + text);
            if(text === wordSet[wordIndex]) {
                $("#word_container").find("[num="+wordIndex+"]").css('color',"#5cb85c");
                $("#word_container").find("[num="+wordIndex+"]").css('background-color',"#FFFFFF");
            } else {
                $("#word_container").find("[num="+wordIndex+"]").css('background-color',"#d9534f");
            }
        } else {
            console.log("Checking incomplete word");
            if(wordSet[wordIndex].indexOf(text) === 0) { //Correct so far
                $("#word_container").find("[num="+wordIndex+"]").css('background-color',"#5cb85c");
            } else {
                $("#word_container").find("[num="+wordIndex+"]").css('background-color',"#d9534f");
            }           
        }
    }

    function trim(string) {
        for(var i = string.length-1; i >=0; i++) {
            if(string.charAt(i) === " ") {
                string = string.slice(0, i);
            } else {
                break;
            }
        }
        return string;
    }

    function nextWord() {
        if(input.value !== " ") {
            console.log("Next word");
            setColor(true);
            wordIndex++;
            lastLength = 0;
            console.log("Resetting with value of " + input.value);
            input.value = "";
            setColor(false);
            move();
        }
    }

    function previousWord() {
        $("#word_container").find("[num="+wordIndex+"]").css('background-color',"#FFFFFF");
        wordIndex--;
        setColor(false);
    }

    $("#input").keydown(function(e) {
        var key = e.which;
        if(key === 229) {
            if(input.length < lastLength) { //Backspace
                key = 32;
            } else {
                var inputVal = input.value;
                key = inputVal.charCodeAt(inputVal.length - 1);
            }
        }
        if(key === 32) {
            if(input.value === " ") { //Don't allow skipping with spaces. Make this an option
                console.log("Resetting word");
                input.value = "";
            } else { //Move forward
                //e.preventDefault();
                setColor(true); //We are complete
                nextWord();
            }
        } else if(key === 8) { //Backspace
            console.log("Backspace");
            if(input.value === "" && lastKey === 8) {
                previousWord();
            }
        } else {
            setColor(false);
        }
        lastKey = key;
        lastLength = input.length;
    
    });

    addWords();


</script>